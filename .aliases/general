# vi:syntax=sh
# Alias definitions.
# See /usr/share/doc/bash-doc/examples in the bash-doc package.

# Better to just include commands (from other dotfile branches) even if they don't run because (e.g) this account cant sudo etc.
# Easier to maintain/merge; and can use those aliases when checking out a branch in an environment it's not meant for, etc.

# enable color aliases of ls if supported
if [[ -x /usr/bin/dircolors ]]; then
	alias ls='ls --color=auto'

	alias dir='dir --color=auto'
	alias vdir='vdir --color=auto'

	alias diff='diff --color=auto'

	alias grep='grep --color=auto'
	alias fgrep='fgrep --color=auto'
	alias egrep='egrep --color=auto'
fi

alias rgrep='grep -r'

man() {
	LESS_TERMCAP_mb=$'\e[01;31m' \
	LESS_TERMCAP_md=$'\e[01;31m' \
	LESS_TERMCAP_me=$'\e[0m' \
	LESS_TERMCAP_se=$'\e[0m' \
	LESS_TERMCAP_so=$'\e[01;44;33m' \
	LESS_TERMCAP_ue=$'\e[0m' \
	LESS_TERMCAP_us=$'\e[01;32m' \
	command man $@
}

# some more ls aliases
alias ll='ls -AlhF'
alias llr='ls -AlhFR'
alias lrl='llr'
alias la='ls -A'
alias lar='ls -AR'
alias lra='lar'
alias lr='ls -R'
alias l='ls -CF'
alias lsgd='ls --group-directories-first'

alias diff='diff -s'

alias greeting='fortune 2> /dev/null | cowsay 2> /dev/null || true'

alias top='htop'

add_ssh_keys() {
	declare key_names="$@"
	for key_name in "${key_names}"; do
		local key="${HOME}"/.ssh/"${key_name}"
		if [[ -f "${key}" ]]; then
			chmod 600 "${key}"
		fi
	done
	eval "$(keychain --eval --quiet $@)"
}




fscrot() {
	scrot -q 100 -m -e 'mv "$f" ~/pictures/' $@
}


alias rr='echo "run-regularly..."; sudo systemctl restart run-regularly.service'
alias fp='echo "fixing permissions..."; sudo /usr/local/sbin/fix-permissions'

alias counttypes='find . -type f -exec basename {} \; | sed -n "s/..*\.//p" | sort | uniq -c | sort -nr'
ftype() {
	declare extension="$1"
	find . -type f -name "*.${extension}"
}
ftypei() {
	declare extension="$1"
	find . -type f -name "*.${extension}" -exec file {} \;
}

alias findbrokenlinks='find -xtype l'



alias eb='exec bash'
alias be='eb'
alias ebnrc='exec bash --norc --noprofile'
alias ez='exec zsh'
alias ze='ez'


alias logs='sudo journalctl -xe'
#alias logs='dmesg | less'

mountiso() {
	declare device="$@"
	sudo mount -o loop "${device}" /media/iso
}

alias umountiso='sudo umount /media/iso'

alias fkill='sudo killall -KILL'

alias merge='rsync --remove-source-files -abviuAP'

alias colorsx='for x in {0..8}; do for i in {30..37}; do for a in {40..47}; do echo -ne "\e[$x;$i;$a""m\\\e[$x;$i;$a""m\e[0;37;40m "; done; echo; done; done; echo ""'

alias colors='for i in {0..255} ; do printf "\x1b[38;5;${i}m%3d " "${i}"; if (( $i == 15 )) || (( $i > 15 )) && (( ($i-15) % 12 == 0 )); then echo; fi; done'
alias colorst='msgcat --color=test'


extract() {
	# should probably not use 7z for all. e.g. extracting tar as root with 7z doesn't preserve permissions and ownership, but doing so with tar -xvzf does.
	# if the format is like .tar.gz, it'll give you a tar file. maybe handle that here. also maybe have it always extract into a new folder sharing the name of the archive. and ask before overwriting; and other similar options.
	# it also does that for .tgz. should just list the contents, and if the archive contains one single tar file, run different command.
	# anything handled by the tar command, do with tar. everything else goes through 7z; which lets me benefit from wide compatibility while using the most up-to-date kernel stuff for tar-related archives, which are the most critical and likely what I should standardize on.
	declare archives="$@"
	if [[ -z "${archive}" ]]; then
		echo "provide archive(s)" >&2
		false
		return "$?"
	fi
	local archive
	for archive in ${archives}; do
		if [[ ! -f "${archive}" ]]; then
			echo "given archive (${archive}) does not exist" >&2
			false
			return "$?"
		fi
		case "${archive%,}" in
			*.tar|*.tgz|*.tar.gz|*.txz|*.tar.xz|*.tbz2|*.tar.bz2)
				tar -xvf "${archive}"
				;;
			*.rar|*.cbr)
				unrar x "${archive}"
				;;
			*.lzma)
				unlzma "${archive}"
				;;
			*.bz2)
				bunzip2 "${archive}"
				;;
			*.gz)
				gunzip "${archive}"
				;;
			*.zip|*.cbz)
				unzip "${archive}"
				;;
			*.z)
				uncompress "${archive}"
				;;
			*.xz)
				unxz "${archive}"
				;;
			*.exe)
				cabextract "${archive}"
				;;
			*)
				7z x "${archive}"
				;;
		esac
	done
}
#maketxz() {
	# txz is best for compression, efficiency etc. seems to be more resistant to corruption than gzip.
#}
#makezip() {
	# extracting individual files from zip is faster. zip is also more ubiquitous.
#}



alias cdup='cd ..'
alias cdu='cdup'
alias cdback='cd -'
alias cdb='cdback'
alias cdhome='cd ~'
alias cdh='cdhome'
alias cdshared='cd /home/shared'
alias cds='cdshared'
alias c='clear'
alias cls='clear && ls'
alias cl='cls'
alias x='exit'

#open vim to bottom of file.
alias vimbottom='vim "+ normal GA"'

alias bal='vim -o ~/.aliases/*'
alias brc='vim -O ~/.shrc/*'

edit_wpg_template() {
	declare config_filename="$1"
	vim ~/.config/wpg/templates/"${config_filename}".base
	echo "remember fmaterial"
}

vimc() {
	declare config_file="$1"
	if [[ -f ~/.config/wpg/templates/"${config_file}".base ]]; then
		edit_wpg_template "${config_file}"
	elif [[ -f ~/.aliases/"${config_file}" ]]; then
		vim ~/.aliases/"${config_file}"
	else
		echo "add to the (vimc) function; not found in wpg templates."
	fi
}


alias mineofetch='neofetch --config ~/.config/neofetch/mini.conf'
alias mnf='mineofetch'
alias nfm='mnf'
alias nf='neofetch'
alias nfa='neofetch --ascii'
alias nfs='neofetch --config ~/.config/neofetch/status.conf'


alias rpl='LANG="en_US.UTF-8" powerline-daemon -qr'


tif() {
	#test if statement
	if [[ $@ ]]; then
		echo "True"
	else
		echo "False"
	fi
}

ier() {
	#if exists, run.
	declare program="$1" command="$@"
	if which "${program}" &> /dev/null; then
		${command}
	fi
}

alias gputemp='nvidia-smi --query-gpu=temperature.gpu --format=csv,noheader,nounits'

alias epoch='date +%s'

alias i3env='i3-msg "exec env > ~/i3env"'

check() {
	declare program_name="$1"
	cat "$(which "${program_name}")"
}

#need to figure out ways to take advantage of how you can use multiple aliases in one command; like how "alias aecho='echo '; alias stuff='lots of stuff'; aecho stuff" echoes 'lots of stuff'

alias nmo='xdg-open . &> /dev/null'

alias aecho='echo '

chwp() {
	declare new_wp="$1"
	if [[ -n "${new_wp}" ]]; then
		ln -sf "../animated/${new_wp}" ~/.config/wallpapers/default/animated
		systemctl --user restart animated-wallpaper.service
	else
		ls ~/.config/wallpapers/animated/
	fi
}

alias fn='find . -name'
fa() {
	find / -path ./media -prune -o $@ -print 2> /dev/null
}
