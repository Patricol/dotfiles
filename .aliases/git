# dotfiles git (rather than dfr (dotfiles repo) which is too close to drf (docker run fast.)) also deathfire grasp.
# dfg_* are intended for internal use only.

alias dfg='git --git-dir=${HOME}/.dotfiles-repo/ --work-tree=${HOME}'


dfgfixsym() {
	# fix symlinks for dotfiles
	local filepath
	dfg ls-tree -r --name-only --full-tree HEAD | while read filepath; do
		#Check input file is a symlink
		if [[ -L "${filepath}" ]]; then
			local symlink
			symlink="${filepath}"
			local target
			target="$(readlink "${symlink}")"
			#if the symlink goes inside the home directory; make it relative.
			if [[ "${target}" == /home/* ]]; then
				#ln -srf "${target}" "${symlink}" #actually skips intermediate symlinks when -r option is given; not an acceptable solution.
				echo "Fixing: ${symlink}"
				local targetname
				targetname="$(basename "${target}")"
				local targetdir
				targetdir="${target%${targetname}}"
				local symlinkname
				symlinkname="$(basename "${symlink}")"
				local symlinkdir
				symlinkdir="${symlink%${symlinkname}}"
				local reltargetdir
				reltargetdir="$(realpath --relative-to="${symlinkdir}" "${targetdir}")"
				local reltarget
				reltarget="${reltargetdir}"/"${targetname}"
				ln -sf "${reltarget}" "${symlink}"
			elif [[ "${target}" == /* ]]; then
				echo "Found non-relative symlink in dotfiles:"
				ls -l "${symlink}"
			fi
		fi
	done
}


alias dfgk='dfg remote set-url origin git@github.com:Patricol/dotfiles.git && add_ssh_keys github'

alias dfgs='dfg status --ahead-behind'
alias dfgl='dfg log --relative-date --graph'
alias dfglc='dfgl --pretty=format:"%Cgreen%h%x09%Cred%ad%x09%Creset%s%Cblue%d"'

alias dfgd='dfg diff'
alias dfgdc='dfgd --cached'

#provide the branch to pull changes from as an arg
alias dfgdt='dfg difftool -y -t meld'
alias dfgdtm='dfgdt master'
alias dfgdtp='dfgdt archpatricol'
alias dfgdtw='dfgdt archwork'
alias dfgdtda='dfgdt dockerarch'
alias dfgdtdu='dfgdt dockerubuntu'

alias dfgmt='dfg mergetool -t meld'


dfg_getmsg_mbsd() {
	# get message for merging branch-specific differences. should avoid changing it, as it breaks automatic merging.
	echo "merge again to re-add branch-specific differences"
}

dfg_getc_mim() {
	# last time changes from this branch were merged into master
	declare branch="$1"
	local lmim
	lmim=$(dfg rev-list --merges --grep="Merge branch '${branch}'" "${branch}" | tac | tail -n1)
	echo "${lmim}"
}
dfg_getc_mbsdfm() {
	#find 'merge branch-specific differences from master' commit (last time they were re-merged into a non-master branch using -s ours etc.)
	declare branch="$1"
	local msgfmbsd
	msgfmbsd="$(dfg_getmsg_mbsd)"
	local lmsgfmbsd # last time branch-specific changes were merged into this branch after changes from this branch were merged into master
	lmsgfmbsd=$(dfg rev-list --merges --grep="${msgfmbsd}" "${branch}" | tac | tail -n1)
	echo "${lmsgfmbsd}"
}
dfg_getc_mfm() {
	# last time changes from master were merged into this branch
	declare branch="$1"
	local lmfm
	lmfm=$(dfg rev-list --merges --grep="Merge branch 'master' into ${branch}" "${branch}" | tac | tail -n1)
	echo "${lmfm}"
}

dfg_getc_new() {
	# get new commits (ones that originated in this branch and haven't been merged into master yet)
	declare branch="$1"
	dfg rev-list --no-merges --first-parent "$(dfg_getc_mbsdfm "${branch}")".."${branch}"
}

dfg_hum() {
	declare branch="$1"
	if [[ "$(dfg_getc_new "${branch}" | wc -l)" -ge 1 ]]; then
		echo "${branch} has unmerged changes."
		true
		return "$?"
	else
		echo "${branch} has no unmerged changes." >&2
		false
		return "$?"
	fi
}


dfg_ommc() {
	# ours-merge merge commit
	declare branch="$1"
	local mbsdfmc
	mbsdfmc="$(dfg_getc_mbsdfm "${branch}")"
	local message
	message="ours-merge to avoid pulling in branch-specific differences"
	dfg merge -s ours -m "${message}" --no-edit "${mbsdfmc}" 
}


alias dfg_m='dfg merge --edit --no-ff --no-commit'
alias dfg_mm='dfg_m master'

alias dfga='dfg add'
alias dfgaa='dfgfixsym && dfga -u && dfga ~/.themes ~/.aliases ~/.config/wpg ~/.config/systemd ~/.config/powerline ~/.config/wallpapers ~/.config/qt5ct/'
alias dfgaae='dfgaa && dfg reset HEAD -- ~/.config/htop/htoprc'
alias dfgc='dfg commit -v'
alias dfgac='dfgaa && dfgc'

alias dfgch='dfg checkout'
alias dfg_chm='dfgch master'
alias dfgchp='dfgch archpatricol'
alias dfgchw='dfgch archwork'
alias dfgchda='dfgch dockerarch'
alias dfgchdu='dfgch dockerubuntu'

alias dfgpop='dfg stash pop'
alias dfgpopall='while dfgpop; do :; done'

alias dfgp='dfgk && dfg push'

alias dfgpopush='dfgpopall && dfgs && dfgp'


dfg_cmtmf() {
	#continue merge to master from
	declare branch="$1"
	[[ -n "${branch}" ]] || exit 1
	dfgc --no-edit
	dfgc --allow-empty -m "dummy commit to enable the next merge"
	dfgch "${branch}"
	dfg merge -s ours -m "$(dfg_getmsg_mbsd)" --no-edit master
	echo "push after sanity-checking the changes made to this branch and master. (dfg diff origin/branch)" >&2
}

dfg_mfmt() {
	# merge from master to branch
	declare branch="$1"
	dfgch "${branch}"
	dfg_mm
	echo "MERGING NEW THINGS FROM MASTER INTO ${branch}; MAKE CHANGES AS NEEDED AND COMMIT."
	dfg merge HEAD || dfgmt && dfgc
	dfg merge HEAD # will error out if merge is in progress; if commit was aborted or otherwise failed because of merge conflicts
}

dfg_mtmf() {
	# merge to master from branch
	declare branch="$1"
	if dfg_mfmt "${branch}"; then
		dfg_chm
		if dfg_hum "${branch}"; then
			dfg_ommc "${branch}"
			dfg_m "${branch}" || (dfgmt &)
			echo "MERGING NEW THINGS FROM $branch INTO MASTER"
			echo "CHECK CHANGES ARE GOOD, THEN MUST USE dfg_cmtmf ${branch} TO COMMIT AND WRAP UP!" >&2
			false
			return "$?"
		else
			true
			return "$?"
		fi
	else
		false
		return "$?"
	fi
}

alias dfgfullmerge='dfg_mtmf archpatricol && dfg_mtmf archwork && dfg_mtmf dockerarch && dfg_mtmf dockerubuntu && dfgchp'
alias dfgmergeall='dfgfullmerge'

alias dfgpushall='dfg_chm && dfgpopush && dfgchdu && dfgpopush && dfgchda && dfgpopush && dfgchw && dfgpopush && dfgchp && dfgpopush'

alias gsf='sudo git --git-dir=/root/.systemfiles-repo/ --work-tree=/'

