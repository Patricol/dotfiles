# vi:syntax=zsh

SHELL="/bin/zsh"

HISTFILE="${HOME}/.history/zsh"
HISTSIZE=1000
SAVEHIST=2000000000

# Treat these characters as part of a word.
#WORDCHARS='*?_-.[]~&;!#$%^(){}<>'

# https://www.zsh.org/mla/workers/2013/msg01176.html https://github.com/bhilburn/powerlevel9k/issues/110
zmodload zsh/terminfo
RPS1="${RPS1%?}%{${(M)RPS1%?}${terminfo[cub1]}%}"


resetkeys() {
	#setup modes and incremental history search etc; should customize the bindkey stuff a lot.
	#select to end of line, select next word, etc
	#keep the vim mode pretty vanilla so that I can use it more once I learn more advanced vim shortcuts etc
	#man terminfo, man zshzle,
	#make modes that mimic usual gui editing etc;
	bindkey -d # reset to defaults
	bindkey -e # switch to emacs mode
	#bindkey -N custom emacs # create new keymap based on emacs
	#bindkey -A custom main # use the newly created keymap
	local -A k
	k[up]="${terminfo[kcuu1]}"
	k[down]="${terminfo[kcud1]}"
	k[left]="${terminfo[kcub1]}"
	k[right]="${terminfo[kcuf1]}"
	k[home]="${terminfo[khome]}"
	k[end]="${terminfo[kend]}"
	bindkey "${k[home]}" beginning-of-line
	bindkey "${k[end]}" end-of-line
	#bindkey "${k[up]}" history-search-backward
	#bindkey "${k[up]}" history-substring-search-up
	#bindkey "${k[up]}" history-incremental-search-backward
	#bindkey "${k[down]}" history-search-forward
	#bindkey "${k[right]}" forward-char
	#bindkey "${k[left]}" backward-char
	bindkey "^${k[left]}" beginning-of-line

	autoload -Uz up-line-or-beginning-search down-line-or-beginning-search
	zle -N up-line-or-beginning-search
	zle -N down-line-or-beginning-search
	bindkey "${k[up]}"   up-line-or-beginning-search
	bindkey "${k[down]}" down-line-or-beginning-search
}

resetkeys


setup_zsh_plugins() {
	setup_zplug() {
		export ZPLUG_HOME="${HOME}/.zplug"
		if [[ ! -d "${ZPLUG_HOME}" ]]; then
			echo "Installing zplug..."
			git clone https://github.com/zplug/zplug "${ZPLUG_HOME}"
		fi
		export ZPLUG_CACHE_DIR="${HOME}/.cache/zplug"
		export ZPLUG_BIN="${ZPLUG_HOME}/bin"
		source "${ZPLUG_HOME}/init.zsh"
	}
	install_missing_plugins() {
		if ! zplug check; then
			zplug install
		fi
	}

	setup_zplug

	zplug 'zplug/zplug', hook-build:'zplug --self-manage'

	#zplug "zsh-users/zsh-history-substring-search"
	if zplug check "zsh-users/zsh-history-substring-search"; then
		# bind UP and DOWN arrow keys
		zmodload zsh/terminfo
		bindkey "$terminfo[kcuu1]" history-substring-search-up
		bindkey "$terminfo[kcud1]" history-substring-search-down

		# bind k and j for VI mode
		bindkey -M vicmd 'k' history-substring-search-up
		bindkey -M vicmd 'j' history-substring-search-down
		#HISTORY_SUBSTRING_SEARCH_HIGHLIGHT_FOUND is a global variable that defines how the query should be highlighted inside a matching command. Its default value causes this script to highlight using bold, white text on a magenta background. See the "Character Highlighting" section in the zshzle(1) man page to learn about the kinds of values you may assign to this variable.
		#HISTORY_SUBSTRING_SEARCH_HIGHLIGHT_NOT_FOUND is a global variable that defines how the query should be highlighted when no commands in the history match it. Its default value causes this script to highlight using bold, white text on a red background. See the "Character Highlighting" section in the zshzle(1) man page to learn about the kinds of values you may assign to this variable.
		#HISTORY_SUBSTRING_SEARCH_GLOBBING_FLAGS is a global variable that defines how the command history will be searched for your query. Its default value causes this script to perform a case-insensitive search. See the "Globbing Flags" section in the zshexpn(1) man page to learn about the kinds of values you may assign to this variable.
	fi
	zplug "zsh-users/zsh-autosuggestions"
	if zplug check "zsh-users/zsh-autosuggestions"; then
		#export ZSH_AUTOSUGGEST_HIGHLIGHT_STYLE=3
		export ZSH_AUTOSUGGEST_BUFFER_MAX_SIZE=20
		unset ZSH_AUTOSUGGEST_USE_ASYNC # unset to disable
		# setup keybindings etc: https://github.com/zsh-users/zsh-autosuggestions
	fi
	zplug "zsh-users/zsh-completions"
	zplug "zsh-users/zsh-syntax-highlighting", defer:2
	#zplug "trapd00r/zsh-syntax-highlighting-filetypes"
	zplug "plugins/git",			from:oh-my-zsh, if:"(( $+commands[git] ))"
	#zplug "plugins/compleat",		from:oh-my-zsh
	zplug "plugins/command-not-found",	from:oh-my-zsh
	#zplug "plugins/colorize",		from:oh-my-zsh
	zplug "plugins/safe-paste",		from:oh-my-zsh
	zplug "plugins/systemd",		from:oh-my-zsh, if:"(( $+commands[systemctl] ))"
	#zplug "plugins/wd",			from:oh-my-zsh
	zplug "plugins/pip",			from:oh-my-zsh, if:"(( $+commands[pip] ))"
	zplug "plugins/tmux",			from:oh-my-zsh, if:"(( $+commands[tmux] ))"
	#zplug "modules/editor",		from:prezto # evaluate
	#zplug "modules/gpg",			from:prezto # evaluate
	#zplug "modules/utility",		from:prezto # evaluate
	#zplug "bhilburn/powerlevel9k",		as:theme # my powerline will override, but this is the most similar theme for fallback.
	#zplug "Tarrasch/zsh-bd"
	#zplug "wting/autojump"
	#zplug "chriskempson/base16-shell"
	zplug "jreese/zsh-titles"
	zplug "MichaelAquilina/zsh-you-should-use"
	if zplug check "MichaelAquilina/zsh-you-should-use"; then
		export YSU_MESSAGE_POSITION="after"
		export YSU_MODE="ALL"
		export YSU_MESSAGE_FORMAT="$(tput setaf 2)Reminder: can use the $(tput setaf 3)%alias_type $(tput setaf 1)%alias $(tput setaf 2)for $(tput setaf 9)'%command'$(tput sgr0)"
	fi

	zplug "~/.dot/l/zsh-local-plugins", from:local

	install_missing_plugins

	#zplug clean
	zplug load #--verbose

	unset -f setup_zplug install_missing_plugins
}
setup_zsh_plugins

powerline_shell_theme='custom'
source /usr/share/powerline/bindings/zsh/powerline.zsh

fpath=(~/.dot/l/zsh-custom-completion $fpath)


source "${HOME}/.dot/l/shrc/both" # maybe emulate bash when doing this?

alias zrc='emulate zsh -c "autoload -Uz compinit" ; compinit -d ~/.cache/zcompdump'
alias zcc='zplug clear ; zrc'

zrc
