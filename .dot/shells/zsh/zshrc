# vim:filetype=zsh

#zmodload zsh/zprof #uncomment for profiling (run zprof after exec zsh)

export DFG_FILES_SOURCED="${DFG_FILES_SOURCED}zshrc,"

SHELL="/bin/zsh"

HISTFILE="${HOME}/.history/zsh"
HISTSIZE=1000
SAVEHIST=2000000000

# Treat these characters as part of a word.
#WORDCHARS='*?_-.[]~&;!#$%^(){}<>'

zstyle ':completion:*' rehash true

# https://www.zsh.org/mla/workers/2013/msg01176.html https://github.com/bhilburn/powerlevel9k/issues/110
zmodload zsh/terminfo
RPS1="${RPS1%?}%{${(M)RPS1%?}${terminfo[cub1]}%}"

autoload -Uz run-help
unalias run-help
alias help=run-help

resetkeys() {
	#setup modes and incremental history search etc; should customize the bindkey stuff a lot.
	#select to end of line, select next word, etc
	#keep the vim mode pretty vanilla so that I can use it more once I learn more advanced vim shortcuts etc
	#echo -n "${terminfo[khome]}" | od -a
	#man terminfo, man zshzle,
	#make modes that mimic usual gui editing etc;
	bindkey -d # reset to defaults
	bindkey -e # switch to emacs mode

	local use_zkbd
	if [[ "${use_zkbd}" ]]; then
		autoload zkbd
		local zkbd_dir keyfile
		zkbd_dir="${HOME}/.dot/l/zkbd"
		for keyfile in "${zkbd_dir}/${TERM}-${DISPLAY}" "${zkbd_dir}/${TERM}-${VENDOR}-${OSTYPE}"; do
			[[ -f "${keyfile}" ]] && source "${keyfile}"
		done
		if ! [[ -v key ]]; then
			zkbdsetup() {
				echo "If using i3, first enter minbindings mode by pressing Win+Ctrl+Alt+Shift+Z."
				echo "After zkbd finishes, be (exec zsh) to reapply keybindings."
				zkbd
			}
			echo "Run zkbdsetup to enable advanced keybindings." >&2
		fi
	else
		typeset -gA key
		key[Backspace]="${terminfo[kbs]}"
		key[Insert]="${terminfo[kich1]}"
		key[Home]="${terminfo[khome]}"
		key[PageUp]="${terminfo[kpp]}"
		key[Delete]="${terminfo[kdch1]}"
		key[End]="${terminfo[kend]}"
		key[PageDown]="${terminfo[knp]}"
		key[Up]="${terminfo[kcuu1]}"
		key[Left]="${terminfo[kcub1]}"
		key[Down]="${terminfo[kcud1]}"
		key[Right]="${terminfo[kcuf1]}"
		
		key[Menu]="[29~"

		key[SInsert]="${terminfo[kIC]}"
		key[SHome]="${terminfo[kHOM]}"
		key[SDelete]="${terminfo[kDC]}"
		key[SEnd]="${terminfo[kEND]}"
		key[SLeft]="${terminfo[kLFT]}"
		key[SRight]="${terminfo[kRIT]}"
		
		#key[SBackspace]="" #identical to regualar Backspace
		key[SUp]="[a"
		key[SDown]="[b"
		#key[SPageUp]="" # no keycode sent
		#key[SPageDown]="" # no keycode sent

		key[SMenu]="[29$"
		
		key[CBackspace]=""
		key[CInsert]="[2^"
		key[CHome]="[7^"
		key[CPageUp]="[5^"
		key[CDelete]="[3^"
		key[CEnd]="[8^"
		key[CPageDown]="[6^"
		key[CUp]="Oa"
		key[CLeft]="Od"
		key[CDown]="Ob"
		key[CRight]="Oc"
		
		key[CMenu]="[29^"
		#manually set keys are for POK3R
		key[GuacHome]="[1~"
		key[GuacEnd]="[4~"
		key[GuacUp]="[A" # in guac, terminfo reports "OA" etc for arrow keys, but outside of vim it's "[A" etc.; which matches non-guac but is overridden by what terminfo sees
		key[GuacLeft]="[D"
		key[GuacDown]="[B"
		key[GuacRight]="[C"
	fi

	getterminfo() {
		local key val thing
		for key val in ${(kv)terminfo}; do
			for thing in "${key}" "${val}"; do
				echo -n "${thing}" | od -a -A n -w4096 | sed 's/esc/^[/g' | tr -d ' '
			done | paste - -
		done
	}

	zbindkey() {
		declare usekey="${key[$1]}" action="$2"
		[[ -n "${usekey}" ]] && [[ -n "${action}" ]] && bindkey -- "${usekey}" "${action}"
	}

	cd_back() {
		popd
		zle       reset-prompt
	}

	zle -N cd_back

	autoload -Uz up-line-or-beginning-search down-line-or-beginning-search
	zle -N up-line-or-beginning-search
	zle -N down-line-or-beginning-search

	zbindkey Home		beginning-of-line
	zbindkey End		end-of-line
	#zbindkey Insert		overwrite-mode
	zbindkey Backspace	backward-delete-char
	zbindkey Delete		delete-char
	#zbindkey Up		up-line-or-history
	#zbindkey Down		down-line-or-history
	#zbindkey Up		history-search-backward
	#zbindkey Down		history-search-forward
	#zbindkey Up		history-substring-search-up
	#zbindkey Down		history-substring-search-down
	#zbindkey Up		history-incremental-search-backward
	#zbindkey Down		history-incremental-search-forward
	zbindkey Up		up-line-or-beginning-search
	zbindkey Down		down-line-or-beginning-search
	zbindkey Left		backward-char
	zbindkey Right		forward-char
	zbindkey PageUp		beginning-of-buffer-or-history
	zbindkey PageDown	end-of-buffer-or-history
	zbindkey Menu		list-choices
	
	zbindkey GuacHome	beginning-of-line
	zbindkey GuacEnd	end-of-line
	zbindkey GuacUp		up-line-or-beginning-search
	zbindkey GuacDown	down-line-or-beginning-search
	zbindkey GuacLeft	backward-char
	zbindkey GuacRight	forward-char
	
	zbindkey CBackspace	backward-delete-word
	zbindkey CDelete	delete-word
	zbindkey CDown		infer-next-history
	zbindkey CEnd		end-of-line
	zbindkey CHome		beginning-of-line
	zbindkey CInsert	
	zbindkey CLeft		backward-word
	zbindkey CMenu		
	zbindkey CPageDown	
	zbindkey CPageUp	
	zbindkey CRight		forward-word
	zbindkey CUp		cd_back
	zbindkey SDelete	kill-whole-line
	zbindkey SDown		history-beginning-search-forward
	zbindkey SEnd		end-of-line
	zbindkey SHome		beginning-of-line
	zbindkey SInsert	
	zbindkey SLeft		
	zbindkey SMenu		
	zbindkey SRight 	
	zbindkey SUp		history-beginning-search-backward
}

resetkeys


setup_zsh_plugins() {
	setup_zplug() {
		export ZPLUG_HOME="${HOME}/.zplug"
		if [[ ! -d "${ZPLUG_HOME}" ]]; then
			echo "Installing zplug..."
			git clone https://github.com/zplug/zplug "${ZPLUG_HOME}"
		fi
		export ZPLUG_CACHE_DIR="${HOME}/.cache/zplug"
		export ZPLUG_BIN="${ZPLUG_HOME}/bin"
		source "${ZPLUG_HOME}/init.zsh"
	}
	install_missing_plugins() {
		if ! zplug check; then
			zplug install
		fi
	}

	setup_zplug

	zplug 'zplug/zplug', hook-build:'zplug --self-manage'

	#zplug "zsh-users/zsh-history-substring-search"
	if zplug check "zsh-users/zsh-history-substring-search"; then
		# bind UP and DOWN arrow keys
		zmodload zsh/terminfo
		bindkey "$terminfo[kcuu1]" history-substring-search-up
		bindkey "$terminfo[kcud1]" history-substring-search-down

		# bind k and j for VI mode
		bindkey -M vicmd 'k' history-substring-search-up
		bindkey -M vicmd 'j' history-substring-search-down
		#HISTORY_SUBSTRING_SEARCH_HIGHLIGHT_FOUND is a global variable that defines how the query should be highlighted inside a matching command. Its default value causes this script to highlight using bold, white text on a magenta background. See the "Character Highlighting" section in the zshzle(1) man page to learn about the kinds of values you may assign to this variable.
		#HISTORY_SUBSTRING_SEARCH_HIGHLIGHT_NOT_FOUND is a global variable that defines how the query should be highlighted when no commands in the history match it. Its default value causes this script to highlight using bold, white text on a red background. See the "Character Highlighting" section in the zshzle(1) man page to learn about the kinds of values you may assign to this variable.
		#HISTORY_SUBSTRING_SEARCH_GLOBBING_FLAGS is a global variable that defines how the command history will be searched for your query. Its default value causes this script to perform a case-insensitive search. See the "Globbing Flags" section in the zshexpn(1) man page to learn about the kinds of values you may assign to this variable.
	fi
	zplug "zsh-users/zsh-autosuggestions"
	if zplug check "zsh-users/zsh-autosuggestions"; then
		#export ZSH_AUTOSUGGEST_HIGHLIGHT_STYLE=3
		export ZSH_AUTOSUGGEST_BUFFER_MAX_SIZE=20
		unset ZSH_AUTOSUGGEST_USE_ASYNC # unset to disable
		# setup keybindings etc: https://github.com/zsh-users/zsh-autosuggestions
		ZSH_AUTOSUGGEST_ACCEPT_WIDGETS=(end-of-line vi-end-of-line vi-add-eol)
		ZSH_AUTOSUGGEST_PARTIAL_ACCEPT_WIDGETS=(forward-char vi-forward-char forward-word emacs-forward-word vi-forward-word vi-forward-word-end vi-forward-blank-word vi-forward-blank-word-end vi-find-next-char vi-find-next-char-skip)
	fi
	zplug "zsh-users/zsh-completions"
	zplug "zsh-users/zsh-syntax-highlighting", defer:2
	#zplug "trapd00r/zsh-syntax-highlighting-filetypes"
	zplug "plugins/git",			from:oh-my-zsh, if:"(( $+commands[git] ))"
	#zplug "plugins/compleat",		from:oh-my-zsh
	zplug "plugins/command-not-found",	from:oh-my-zsh
	#zplug "plugins/colorize",		from:oh-my-zsh
	zplug "plugins/safe-paste",		from:oh-my-zsh
	zplug "plugins/systemd",		from:oh-my-zsh, if:"(( $+commands[systemctl] ))"
	#zplug "plugins/wd",			from:oh-my-zsh
	zplug "plugins/pip",			from:oh-my-zsh, if:"(( $+commands[pip] ))"
	zplug "plugins/tmux",			from:oh-my-zsh, if:"(( $+commands[tmux] ))"
	#zplug "modules/editor",		from:prezto # evaluate
	#zplug "modules/gpg",			from:prezto # evaluate
	#zplug "modules/utility",		from:prezto # evaluate
	#zplug "bhilburn/powerlevel9k",		as:theme # my powerline will override, but this is the most similar theme for fallback.
	#zplug "Tarrasch/zsh-bd"
	#zplug "wting/autojump"
	#zplug "chriskempson/base16-shell"
	zplug "jreese/zsh-titles"
	zplug "MichaelAquilina/zsh-you-should-use"
	if zplug check "MichaelAquilina/zsh-you-should-use"; then
		export YSU_MESSAGE_POSITION="after"
		export YSU_MODE="ALL"
		export YSU_MESSAGE_FORMAT="$(tput setaf 2)Reminder: can use the $(tput setaf 3)%alias_type $(tput setaf 1)%alias $(tput setaf 2)for $(tput setaf 9)'%command'$(tput sgr0)"
	fi

	zplug "~/.dot/l/zsh-local-plugins", from:local

	install_missing_plugins

	#zplug clean
	zplug load #--verbose

	unset -f setup_zplug install_missing_plugins
}
setup_zsh_plugins

powerline_shell_theme='custom'
source /usr/share/powerline/bindings/zsh/powerline.zsh

fpath=(~/.dot/l/zsh-custom-completion/ $fpath)


source "${HOME}/.dot/l/shrc/both" # maybe emulate bash when doing this?

zrc() {
	#keep this as a function; so it's expanded in update-zsh-plugins
	emulate zsh -c "autoload -Uz compinit"
	compinit -d ~/.cache/zcompdump
}
zcc() {
	#keep this as a function; so it's expanded in update-zsh-plugins
	zplug clear
	zrc
}

zrc
