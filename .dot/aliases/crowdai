# vim:filetype=sh
# CrowdAI Alias definitions.

if hash crowdai-env 2> /dev/null; then
	eval "$(crowdai-env)"
fi

alias cdc='cd ~/files/crowdai'

make_crowdai_aliases() {
	local -A base_commands
	base_commands=( ["inca"]="cdi" )
	base_commands[incad]="cdid"
	alias cdi='cd ~/files/crowdai/inca'
	alias cdid='cd ~/files/crowdai/fresh/inca'
	local ba bc # base_alias base_command
	local unbound
	unbound="-f docker-compose.unbound.yml"
	for ba in inca incad; do
		bc="${base_commands[${ba}]}"
		alias "${ba}build"="${bc} && dcf build"
		alias "${ba}"="${ba}build && dcf up -d"
		alias "${ba}b"="${bc} && dcf ${unbound} build && dcf ${unbound} up -d"
		alias "${ba}_fsh"="${ba} && dcf exec inca-tasks /bin/bash"
		alias "${ba}fsh"="${ba}_fsh ; dcf down"
		alias "${ba}fp"="${ba}_fsh -ic ipython"
		alias "${ba}_sh"="${ba}b && dcf ${unbound} exec inca-tasks /bin/bash"
		alias "${ba}sh"="${ba}_sh ; dcf ${unbound} down"
		alias "${ba}p"="${ba}_sh -c ipython"
		alias "${ba}lint"="${bc} && ./bin/inca-mypy && ./bin/inca-lint"
		alias "${ba}tests"="${bc} && INCATEST_COMPOSE_PROJECT_NAME=${ba}test ./bin/inca-test --down" #-x -n 8"
		alias "${ba}test_unit"="${ba}tests inca/t/unit"
		alias "${ba}test_integration"="${ba}tests inca/t/integration"
		alias "${ba}test"="${ba}test_unit && ${ba}test_integration"
		alias "${ba}t"="${ba}lint && ${ba}build && ${ba}test"
		alias "${ba}pdb"="rpdb ${ba}test_inca-tasks_1"
	done
}

make_crowdai_aliases

alias cdtg='cd ~/files/crowdai/olmec/terragrunt'
alias cdtf='cd ~/files/crowdai/olmec/terraform'
alias cdo='cd ~/files/crowdai/olmec'

alias tgcc='rm -rf $(find -type d -name ".terragrunt-cache")'
alias tfcc='rm -rf $(find -type d -name ".terraform")'
alias tcc='tgcc && tfcc'

alias tga='terragrunt apply'
alias tgd='terragrunt destroy'

cai_vault_auth() {
	declare team="$1"
	rm -f "${HOME}/.vault-token"
	# need to cd so the python shim works
	cdc
	crowdai-vault-login "${team}"
	cd -
}
alias caiva='cai_vault_auth admin'
alias caivsa='cai_vault_auth sudo-admin'

cai_auth() {
	declare profile="$1"
	ln -sf "credentials-${profile}" "${HOME}/.aws/credentials"
	caiva
}
alias caiauth-patrick='cai_auth patrick'
alias caiauth-pau='cai_auth pau'
alias caiauth-test='cai_auth test'


oatp() {
	# olmec all test plan
	argue_options=("n,no_rebuild_cache,noarg")
	source "$(which argue)"
	local d
	cdo
	# if [[ -n "${no_rebuild_cache}" ]]
	tcc
	for d in $(find terraform/live -name "*.tf" -exec dirname {} \; | uniq); do
		echo "${d}"
		cd "${d}"
		terraform init
		terraform plan
		cdo
	done
	for d in $(find terragrunt -name "*.tf" -exec dirname {} \; | uniq); do
		echo "${d}"
		cd "${d}"
		terragrunt plan
		cdo
	done
	cd "${startdir}"
}

tfp() {
	tcc
	terraform init
	terraform plan
}

tgp() {
	tcc
	terragrunt plan
}

tgpa() {
	tcc
	terragrunt plan-all
}

rpdb() {
	declare container_name="$1"
	local container_id
	until [[ -n "${container_id}" ]] && docker exec -it "${container_id}" telnet 127.0.0.1 4444; do
		container_id="$(docker inspect -f"{{.Id}}" "${container_name}")"
		sleep 1
	done
}

#alias jupyter='docker run -p 8888:8888 jupyter/scipy-notebook:latest'

k8s_plugin_setup() {
	declare version="$1" repolink="$2"
	local gopath
	gopath="${GOPATH:-${HOME}/go}"
	go get -u "${repolink}"
	rm -rf ~/.terraform.d/plugins
	mkdir -p ~/.terraform.d/plugins
	k8s_provider="$(find ${gopath} -type f -name "terraform-provider-k8s" | grep "/bin/" | tail -n1)"
	if [[ -n "${k8s_provider}" ]]; then
	    ln -s "${k8s_provider}" "${HOME}/.terraform.d/plugins/terraform-provider-k8s_v${version}"
	fi
}

downgrade_aur() {
	declare package="$1" commit="$2"
	local start_dir temp_dir
	start_dir="$(pwd)"
	temp_dir="$(mktemp -d)"
	cd "${temp_dir}"
	git clone "https://aur.archlinux.org/${package}.git"
	cd "${package}"
	git checkout "${commit}"
	makepkg -scir --noconfirm
	cd "${start_dir}"
	rm -rf "${temp_dir}"
}

terrdown() {
	downgrade_aur terragrunt-bin 1d237f33114efcdc0317bd6cd999b07434ec5463
	downgrade_aur kubernetes-helm d2ed21f2fe6fdd563895c585b88da825349116e0
	downgrade_aur kubectl-bin 48b01da4624997dd2cd5e371a58c788f5a93ab44
	echo "CHOOSE 0.11.14"
	downgrade terraform
	k8s_plugin_setup "0.0.16" "github.com/ericchiang/terraform-provider-k8s"
}

terrup() {
	yay --noconfirm -R terraform terragrunt-bin kubernetes-helm kubectl-bin
	yay --noconfirm --answerdiff None -S terraform terragrunt-bin kubernetes-helm kubectl-bin
	k8s_plugin_setup "0.2.0.0" "github.com/crowd-ai/terraform-provider-k8s"
}

k_cluster() {
	declare cluster_name="$1"
	aws eks update-kubeconfig --name "${cluster_name}"
	kubectl exec -it "$(kubectl get pods | cut -c1-45 | grep -m 1 "web")" bash
}

alias kprod="k_cluster core-production"
alias kstaging="k_cluster core-staging"

a_eks_switch() {
	declare name="$1"
	cdc
	rm ~/.kube/config
	local new_context
	new_context="$(aws eks update-kubeconfig --name "${name}" | tee /dev/tty | tr ' ' '\n' | grep ":cluster/${name}")"
	kubectl config use-context "${new_context}"
	# kubectl --namespace=kube-system
	kubectl get pods
	helm list -a
	cd -
}

a_eks_switch_local() {
	rm ~/.kube/config
	if [[ -f ./kubeconfig ]]; then
		ln -sf "$(pwd)/kubeconfig" ~/.kube/config
		kubectl get pods
		helm list -a
	else
		echo "No ./kubeconfig file found." >&2
	fi
}

alias eks-staging="a_eks_switch core-staging"
alias eks-production="a_eks_switch core-production"
alias eks-eq="a_eks_switch experiment-queue"
alias eks-local="a_eks_switch_local"

alias testenv="cdc && scratch/run testenv test bumped"
