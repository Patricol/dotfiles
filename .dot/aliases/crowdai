# vim:filetype=sh
# CrowdAI Alias definitions.

if hash crowdai-env 2> /dev/null; then
	eval "$(crowdai-env)"
fi

alias cdc='cd ~/files/crowdai'

make_crowdai_aliases() {
	local -A base_commands
	base_commands=( ["inca"]="cdi" )
	base_commands[incad]="cdid"
	alias cdi='cd ~/files/crowdai/inca'
	alias cdid='cd ~/files/crowdai/fresh/inca'
	local ba bc # base_alias base_command
	local unbound
	unbound="-f docker-compose.unbound.yml"
	for ba in inca incad; do
		bc="${base_commands[${ba}]}"
		alias "${ba}build"="${bc} && dcf build"
		alias "${ba}"="${ba}build && dcf up -d"
		alias "${ba}b"="${bc} && dcf ${unbound} build && dcf ${unbound} up -d"
		alias "${ba}_fsh"="${ba} && dcf exec inca-tasks /bin/bash"
		alias "${ba}fsh"="${ba}_fsh ; dcf down"
		alias "${ba}fp"="${ba}_fsh -ic ipython"
		alias "${ba}_sh"="${ba}b && dcf ${unbound} exec inca-tasks /bin/bash"
		alias "${ba}sh"="${ba}_sh ; dcf ${unbound} down"
		alias "${ba}p"="${ba}_sh -c ipython"
		alias "${ba}lint"="${bc} && ./bin/inca-mypy && ./bin/inca-lint"
		alias "${ba}tests"="${bc} && INCATEST_COMPOSE_PROJECT_NAME=${ba}test ./bin/inca-test --clean --pull-aztec --down" #-x -n 8"
		alias "${ba}test_unit"="${ba}tests inca/t/unit"
		alias "${ba}test_integration"="${ba}tests inca/t/integration"
		alias "${ba}test"="${ba}test_unit && ${ba}test_integration"
		alias "${ba}t"="${ba}lint && ${ba}build && ${ba}test"
		alias "${ba}pdb"="rpdb ${ba}test_inca-tasks_1"
	done
}

alias "aztec"="cd ~/files/crowdai/aztec_platform && dcf build && dcf up -d"
make_crowdai_aliases

alias cdtg='cd ~/files/crowdai/olmec/terragrunt'
alias cdtf='cd ~/files/crowdai/olmec/terraform'
alias cdo='cd ~/files/crowdai/olmec'
alias cdoa='cd /home/docker/olmec'
alias cdob='cd /home/docker/olmec/bumped'
alias cdorg='cd /home/docker/olmec/rescue-govcloud'
alias cdong='cd /home/docker/olmec/newer-govcloud'

cai_vault_auth() {
	declare team="$1"
	rm -f "${HOME}/.vault-token"
	# need to cd so the python shim works
	cdc
	crowdai-vault-login "${team}"
	cd -
}
# alias caiva='cai_vault_auth admin'
# alias caivsa='cai_vault_auth sudo-admin'
alias caiva='vault login -method=aws role=developer-admin'
alias caivsa='vault login -method=aws role=developer-admin-sudo'

cai_auth() {
	declare profile="$1"
	ln -sf "credentials-${profile}" "${HOME}/.aws/credentials"
	caiva
}
alias caiauth-patrick='cai_auth patrick'
alias caiauth-test='cai_auth test'

rpdb() {
	declare container_name="$1"
	local container_id
	until [[ -n "${container_id}" ]] && docker exec -it "${container_id}" telnet 127.0.0.1 4444; do
		container_id="$(docker inspect -f"{{.Id}}" "${container_name}")"
		sleep 1
	done
}

#alias jupyter='docker run -p 8888:8888 jupyter/scipy-notebook:latest'

downgrade_aur() {
	declare package="$1" commit="$2"
	local start_dir temp_dir
	start_dir="$(pwd)"
	temp_dir="$(mktemp -d)"
	cd "${temp_dir}"
	git clone "https://aur.archlinux.org/${package}.git"
	cd "${package}"
	git checkout "${commit}"
	makepkg -scir --noconfirm
	cd "${start_dir}"
	rm -rf "${temp_dir}"
}

alias kprod="k_cluster core-production"
alias kstaging="k_cluster core-staging"

a_eks_switch() {
	declare name="$1"
	if [[ -L "${HOME}/.kube/config" ]]; then
		# Avoid contaminating symlinked files.
		rm "${HOME}/.kube/config"
	fi
	kubectl config use-context "$(aws eks update-kubeconfig --name "${name}" | tee /dev/tty | tr ' ' '\n' | grep ":cluster/${name}")"
	kubectl get pods
}

a_eks_govcloud_switch() {
	declare name="$1"
	if [[ -L "${HOME}/.kube/config" ]]; then
		# Avoid contaminating symlinked files.
		rm "${HOME}/.kube/config"
	fi
	kubectl config use-context "$(env AWS_PROFILE=govcloud aws eks update-kubeconfig --name "${name}" | tee /dev/tty | tr ' ' '\n' | grep ":cluster/${name}")"
	kubectl get pods
}

alias eks-staging="a_eks_switch core-staging"
alias eks-production="a_eks_switch core-production"
alias eks-govcloud="a_eks_govcloud_switch core-production"
alias eks-govcloud-vault="a_eks_govcloud_switch primary-vault"
alias eks-eq="a_eks_switch experiment-queue"
alias eks-misc="a_eks_switch misc"
alias eks-vault="a_eks_switch primary-vault"
alias eks-bumptest="a_eks_switch bumptest"
alias eks-broken-cluster-interview="AWS_PROFILE=sandbox aws eks update-kubeconfig --name broken-cluster-interview"

alias a_olmec_bumped="cdob && scripts/runtime/run /home/docker/olmec/bumped ${HOME}/.aws "
alias olmec="a_olmec_bumped crowdai"
alias olmec-bumped='/home/docker/olmec/bumped/olmec/scripts/runtime/run'
alias olmec-sandbox="a_olmec_bumped sandbox"
alias olmec-test="a_olmec_bumped patrick-test"
alias olmec-govcloud-old="cdorg && olmec/scripts/runtime/run /home/docker/olmec/rescue-govcloud ${HOME}/.aws govcloud"
alias olmec-govcloud-new="cdong && olmec/scripts/runtime/run govcloud ${HOME}/.aws"
alias olmec-green='/home/docker/olmec/green/olmec/scripts/runtime/run'
alias olmec-blue='/home/docker/olmec/blue/olmec/scripts/runtime/run'
alias olmec-yellow='/home/docker/olmec/yellow/olmec/scripts/runtime/run'
alias olmec-red='/home/docker/olmec/red/olmec/scripts/runtime/run'

alias klscale="ksl svc/cluster-autoscaler-aws-cluster-autoscaler"

sshc_aws() {
	declare instance_id="$1"
	local ip_address
	ip_address="$(aws ec2 describe-instances --instance-ids "${instance_id}" | grep PublicIpAddress | grep -Eo '[0-9]{0,3}\.[0-9]{0,3}\.[0-9]{0,3}\.[0-9]{0,3}')"
	sshc "ubuntu@${ip_address}"
}
alias samplename="sshc_aws i-04c4e5a401932bf43"

alias jenkins="ssh -i ~/.ssh/crowdai-master -t ubuntu@ec2-34-196-187-153.compute-1.amazonaws.com 'cd /var/lib/jenkins ; bash'"

maketar_enclave() {
	if [[ $# -ne 1 ]]; then
		echo "provide only a single folder or file as an argument" >&2
		return 1
	fi
	declare target="$1"
	target="$(realpath --relative-to=. "${target}")"
	tar -cvf - "${target}" | split -b 10M - "${target}.tar."
}
maketxz_enclave() {
	if [[ $# -ne 1 ]]; then
		echo "provide only a single folder or file as an argument" >&2
		return 1
	fi
	declare target="$1"
	target="$(realpath --relative-to=. "${target}")"
	tar -cvJf - "${target}" | split -b 200M - "${target}.txz"
}

