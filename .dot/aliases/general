# vim:filetype=sh
# Alias definitions.
# See /usr/share/doc/bash-doc/examples in the bash-doc package.

# Better to just include commands (from other dotfile branches) even if they don't run because (e.g) this account cant sudo etc.
# Easier to maintain/merge; and can use those aliases when checking out a branch in an environment it's not meant for, etc.

alias rgrep='grep -r'

# some more ls aliases
alias ll='ls -AlhF'
alias llr='ls -AlhFR'
alias lrl='llr'
alias la='ls -A'
alias lar='ls -AR'
alias lra='lar'
alias lr='ls -R'
alias l='ls -CF'
alias l1='ls -1'
alias lsgd='ls --group-directories-first'

alias edit='${EDITOR}'
alias pager='${PAGER}'

alias rd='rmdir'
alias md='mkdir -p'

alias cloc='curl -L -C - -O' # follow redirects, download as original name, continue

gui_open() {
	declare program="$@"
	if [[ "${XDG_CURRENT_DESKTOP}" == "sway" ]]; then
		echo "using sway"
		swaymsg exec "${program}"
	else
		echo "using i3"
		i3-msg exec "${program}"
	fi
}

gui_sudo_open() {
	declare as_user="$1" ; shift
	local program
	program="$@"
	if [[ "${XDG_CURRENT_DESKTOP}" == "sway" ]]; then
		xhost +SI:localuser:root
	fi
	gui_open "sudo --askpass --login --user=${as_user} -- env QT_QPA_PLATFORMTHEME=qt5ct ${program}"
	if [[ "${XDG_CURRENT_DESKTOP}" == "sway" ]]; then
		# xhost -SI:localuser:root
		echo "LEFT INSECURE"
	fi
}

ydotooldc() {
	if [[ "${XDG_CURRENT_DESKTOP}" == "sway" ]]; then
		xhost +SI:localuser:root
	fi
	sudo ydotoold --socket-path="${HOME}/.ydotool_socket" --socket-own="$(id -u):$(id -g)"
	if [[ "${XDG_CURRENT_DESKTOP}" == "sway" ]]; then
		xhost -SI:localuser:root
	fi
}

alias sudo='sudo ' # allows me to use sudo before aliases
alias s='sudo'

alias sup='sudo -i -u patricol --'
alias sip='sup'
alias supa='sudo -i -u patricol -A --'
alias supg='gui_sudo_open patricol'
alias suw='sudo -i -u work --'
alias suwa='sudo -i -u work -A --'
alias siw='suw'
alias suwg='gui_sudo_open work'
alias sur='sudo -i -u root --'
alias sir='sur'
alias surg='gui_sudo_open root'
alias visudo='sudo -- visudo'

alias mnas='mount /media/nas'
alias umnas='umount /media/nas'
alias marcade='mountpoint /media/arcade || mount /media/arcade'
alias umarcade='umount /media/arcade'

alias mnt='tldr'
alias mnc='cheat'
alias mn='mnt'


#replace with nvim once I switch to it.
alias ex='vim -e'
alias exim='vim -E'
alias rview='vim -RZ'
alias rvim='vim -Z'
alias view='vim -R'
alias vimdiff='vim -d'

alias diffdir='diff -r'
# alias diff='diff -s'

alias greeting='fortune 2> /dev/null | cowsay 2> /dev/null || true'

alias top='htop'



screenshot() {
	scrot "${HOME}/.dot/l/f/screenshots/scrot_%Y-%m-%d_%H-%M-%S.png" --multidisp $@ # --quality 100 # for png, higher quality just makes it less compressed.
}
alias screenshot-window='screenshot --focused'
alias screenshot-selection='screenshot --select'
alias fscrot='screenshot'
alias screenshot-window-wayland='grimshot save active'
alias screenshot-selection-wayland='grimshot save area'
alias screenshot-wayland='grimshot save screen'


alias fp='echo "fixing permissions..."; sudo /usr/local/sbin/fix-permissions'

alias counttypes='find . -type f -exec basename {} \; | sed -n "s/..*\.//p" | sort | uniq -c | sort -nr'
ftype() {
	declare extension="$1"
	find . -type f -name "*.${extension}"
}
ftypei() {
	declare extension="$1"
	find . -type f -name "*.${extension}" -exec file {} \;
}

alias findbrokenlinks='find -xtype l'

alias eb='exec bash'
alias ebnrc='bash --norc --noprofile' # don't exec; so it's easier to get back to the previous shell
alias ez='exec zsh'
alias be='exec "${SHELL}"'

alias ep='ipython'


mountiso() {
	declare device="$@"
	sudo mount -o loop "${device}" /media/iso
}

alias umountiso='sudo umount /media/iso'
# alias fumount='sudo fusermount -uz'
alias fumount='force_unmount'

force_unmount() {
	bash --norc --noprofile -c "sudo fusermount -uz /media/$@"
}

alias fkill='sudo killall -KILL'

alias cdup='cd ..'
alias cdu='cdup'
alias ..='cd ..'
alias ..2='cd ../..'
alias ..3='cd ../../..'
alias ..4='cd ../../../..'
alias ..5='cd ../../../../..'
alias ..6='cd ../../../../../..'
alias ..7='cd ../../../../../../..'
alias ..8='cd ../../../../../../../..'
alias ..9='cd ../../../../../../../../..'
alias ...='..2'
alias ....='..3'
alias .....='..4'
alias cdback='cd -'
alias cdb='cdback'
alias cdhome='cd ~'
alias cdh='cdhome'
alias cdshared='cd /home/shared'
alias cds='cdshared'
alias cdnas='cd /media/nas'
alias cdn='cdnas'
alias cdarcade='cd /media/arcade'
alias cda='cdarcade'
alias cddots='cd ~/.dot'
alias cdd='cddots'
alias cddotsl='cd ~/.dot/l'
alias cddl='cddotsl'
alias cdfiles='cd ~/files/'
alias cdf='cdfiles'
alias cdforks='cd /home/shared/programming/forks'
alias cdterraform='cd /home/docker/projects/terraform/'
alias cdt='cdterraform'
alias c='clear'
alias ca='reset' # fully clear scrollback; though this does more than that
alias cls='clear && ls'
alias cl='cls'
alias cll='clear && ll'
alias cla='clear && la'
alias cnf='clear && nf'
alias nfc='cnf'
alias x='exit'

alias nas='ssh nas'
alias arcade='ssh arcade'
alias ede='ssh ede'
alias pam='ssh pam'

alias dtf='cdt && scripts/runtime/run terraform gcloud'

alias d='dirs -v'
#for index ({1..9}) alias "$index"="cd +${index}"; unset index

#open vim to bottom of file.
alias vimbottom='vim "+ normal GA"'

alias bell='printf \\a'

alias mineofetch='neofetch --config ~/.config/neofetch/mini.conf'
alias mnf='mineofetch'
alias nfm='mnf'
alias nf='neofetch'
alias nfa='neofetch --ascii'
alias nfs='neofetch --config ~/.config/neofetch/status.conf'


alias rpl='~/.dot/l/bin/restart-powerline-daemon'


alias gputemp='nvidia-smi --query-gpu=temperature.gpu --format=csv,noheader,nounits'

alias epoch='date +%s'
alias epochms='date +%s.%N'


alias nmo='gui_open nemo "$(pwd)"'

alias dk='a supa mount /media/nas && a supg digikam'

alias aecho='echo '


alias fn='find . -name'
fa() {
	#local ignore_dirs
	#ignore_dirs=""
	#for dir in /var; do
	#	ignore_dirs="${ignore_dirs} -path ${dir} -prune -o"
	#done
	#find / -mount ${ignore_dirs} $@ -print 2> /dev/null
	# find / -mount ${ignore_dirs} $@ -print
	sudo find / -mount $@ 
}

fan() {
	fa -name $@
}

alias pingf='ping -c 1 1.0.0.1'
alias pingl='ping 1.0.0.1'


switch_to_vnc_resolution() {
	declare resolution="$1"
	${HOME}/.dot/l/bin/add-vnc-mode-if-needed "${resolution}"
	xrandr -s "${resolution}"
}

alias vnclf='switch_to_vnc_resolution 1920x1080'
alias vncbf='switch_to_vnc_resolution 2560x1080'
alias vncl='switch_to_vnc_resolution 1920x1001'
alias vncb='switch_to_vnc_resolution 2560x1001'

alias upload-key='gpg --keyserver keys.gnupg.net --send-key'
alias get-key='gpg --keyserver keys.gnupg.net --send-key'

pbr() {
	for m in $(polybar --list-monitors | cut -d":" -f1); do
		MONITOR=$m polybar --reload main &
		MONITOR=$m polybar --reload wss &
	done
}

loop() {
	declare wait_between="$1"
	shift
	while true; do
		$@
		sleep "${wait_between}"
	done
}

alias windirstat='surg baobab /home'

alias tfrun='/home/docker/projects/terraform/scripts/runtime/run terraform'
xhost -SI:localuser:root
