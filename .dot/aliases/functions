# vi:syntax=sh
# Standalone functions that don't fit into the other sections.


add_ssh_keys() {
        eval "$(keychain --eval --quiet $@)"
}


extract() {
	# should probably not use 7z for all. e.g. extracting tar as root with 7z doesn't preserve permissions and ownership, but doing so with tar -xvzf does.
	# if the format is like .tar.gz, it'll give you a tar file. maybe handle that here. also maybe have it always extract into a new folder sharing the name of the archive. and ask before overwriting; and other similar options.
	# it also does that for .tgz. should just list the contents, and if the archive contains one single tar file, run different command.
	# anything handled by the tar command, do with tar. everything else goes through 7z; which lets me benefit from wide compatibility while using the most up-to-date kernel stuff for tar-related archives, which are the most critical and likely what I should standardize on.
	declare archives="$@"
	if [[ -z "${archives}" ]]; then
		echo "provide archive(s)" >&2
		false
		return "$?"
	fi
	local archive
	for archive in ${archives}; do
		if [[ ! -f "${archive}" ]]; then
			echo "given archive (${archive}) does not exist" >&2
			false
			return "$?"
		fi
		case "${archive%,}" in
			*.tar|*.tgz|*.tar.gz|*.txz|*.tar.xz|*.tbz2|*.tar.bz2)
				tar -xvf "${archive}"
				;;
			*.rar|*.cbr)
				unrar x "${archive}"
				;;
			*.lzma)
				unlzma "${archive}"
				;;
			*.bz2)
				bunzip2 "${archive}"
				;;
			*.gz)
				gunzip "${archive}"
				;;
			*.zip|*.cbz)
				unzip "${archive}"
				;;
			*.z)
				uncompress "${archive}"
				;;
			*.xz)
				unxz "${archive}"
				;;
			*.exe)
				cabextract "${archive}"
				;;
			*)
				7z x "${archive}"
				;;
		esac
	done
}
#maketxz() {
	# txz is best for compression, efficiency etc. seems to be more resistant to corruption than gzip.
#}
#makezip() {
	# extracting individual files from zip is faster. zip is also more ubiquitous.
#}

alias svim='sudo uvim'
alias satom='env SUDO_EDITOR="atom --wait" sudo --edit'

alias bal='vim -o ~/.dot/l/aliases/*'
alias brc='vim -O ~/.dot/l/shrc/*'

edit_wpg_template() {
	declare editor="$1" config_filename="$2"
	${editor} ~/.config/wpg/templates/"${config_filename}".base
	echo "remember fmaterial"
}

edit_config() {
	#later likely make this check for filenames in the dotfiles repo
	#make this handle multiple filenames as input.
	declare editor="$1" config_file="$2"
	if [[ -f ~/.config/wpg/templates/"${config_file}".base ]]; then
		edit_wpg_template "${editor}" "${config_file}"
	elif [[ -f ~/.dot/l/aliases/"${config_file}" ]]; then
		${editor} ~/.dot/l/aliases/"${config_file}"
	elif [[ -f ~/.dot/l/shrc/"${config_file}" ]]; then
		${editor} ~/.dot/l/shrc/"${config_file}"
	else
		if [[ "${editor}" == "vim" ]]; then
			editor="uvim"
		fi
		case "${config_file}" in
			lightdm|lightdm-webkit2-greeter|slick-greeter)
				sudo "${editor}" "/etc/lightdm/${config_file}.conf"
				;;
			sshd|ssh)
				config_file="${config_file}_config"
				;& #fall-through
			sshd_config|ssh_config)
				sudo "${editor}" "/etc/ssh/${config_file}"
				;;
			sudoers)
				sudo visudo
				;;
			makepkg|mkinitcpio|pacman|sudo|vconsole)
				config_file="${config_file}.conf"
				;& #fall-through
			bash.bash_logout|bash.bashrc|environment|fstab|motd|profile)
				sudo "${editor}" "/etc/${config_file}"
				;;
			setup)
				sudo "${editor}" "/root/${config_file}.txt"
				;;
			*)
				echo "config file not found; add it to the (edit_config) function."
				;;
		esac
	fi
}

vimc() {
	declare config_file="$1"
	edit_config "vim" "${config_file}"
}

atomc() {
	declare config_file="$1"
	edit_config "atom" "${config_file}"
}

alias vc='vimc'
alias ac='atomc'



tif() {
	#test if statement
	if [[ $@ ]]; then
		echo "True"
	else
		echo "False"
	fi
}

ier() {
	#if exists, run.
	local program="$1"; shift
	local args="$@"
	if which "${program}" &> /dev/null; then
		${program} ${args}
	fi
}

alias i3env='i3-msg "exec env > ~/i3env"'

check() {
	declare program_name="$1"
	cat "$(which "${program_name}")"
}


chwp() {
	declare new_wp="$1"
	if [[ -n "${new_wp}" ]]; then
		ln -sf "../animated/${new_wp}" ~/.config/wallpapers/default/animated
		systemctl --user restart animated-wallpaper.service
	else
		ls ~/.config/wallpapers/animated/
	fi
}

